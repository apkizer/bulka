package com.planetarypvp.bulka.bukkit;

import com.planetarypvp.bulka.Bulka;
import com.planetarypvp.bulka.FileWriter;
import com.planetarypvp.bulka.YamlFile;
import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.configuration.serialization.ConfigurationSerializable;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.lang.annotation.Annotation;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.*;

public class BukkitYamlFileWriter implements FileWriter
{
    private Bulka bulka;
    private Class configurable;
    private Class<? extends Annotation> configurableAnnotation;
    private String directory;
    private YamlConfiguration yaml;
    private static final Set<Class<?>> supportedTypes = getSupportedTypes();

    public BukkitYamlFileWriter(Bulka bulka)
    {
        this.bulka = bulka;
    }

    @Override
    public void setConfigurableClass(Class clazz)
    {
        configurable = clazz;
    }

    @Override
    public void setConfigurableAnnotation(Class clazz)
    {
        configurableAnnotation = clazz;
    }

    @Override
    public void setDirectory(String path)
    {
        directory = path;
    }

    @Override
    public void writeClass(Class clazz)
    {
        YamlFile yamlFile = new BukkitYamlFile(clazz.getSimpleName());
        yamlFile.set("class", clazz.getName());

        for(Method m : clazz.getMethods())
        {
            try {
                writeMethod(yamlFile, m);
            } catch (IllegalAccessException e) {
                handleException(e);
            } catch (InstantiationException e) {
                handleException(e);
            }
        }

        try {
            yamlFile.save(directory);
        } catch (IOException e) {
            handleException(e);
        }
    }

    @Override
    public File touch(String fileName)
    {
        //System.out.println("touch");
        try {
            File f = new File(directory, fileName);
            f.createNewFile();
            FileOutputStream os = new FileOutputStream(f);
            //os.write("Generated by Bulka".getBytes());
            os.close();
            //System.out.println(f.getAbsolutePath());
            return f;
        } catch (IOException e) {
            handleException(e);
        }
        return null;
    }

    public void readme()
    {
        File readme = touch("README.md");
    }

    private void handleException(Exception e)
    {
        bulka.getPlugin().getLogger().severe(e.getMessage());
        e.printStackTrace();
    }

    private void writeMethod(YamlFile yamlFile, Method m) throws IllegalAccessException, InstantiationException
    {
        if(m.getAnnotations().length > 0 && m.getAnnotations()[0].annotationType().getName().equals(configurableAnnotation.getName()))//TODO probably better way to compare these
        {
            Class<?> parameterType = m.getParameterTypes()[0];

            if(implementsConfigurationSerializable(parameterType))//Maybe later we can just forget about ConfigurationSerializable completely?
            {
                System.out.println("Serializable detected.");
                writeSerializable(yamlFile, getKeyFromMethodName(m.getName()), parameterType);
            }
            else if(parameterType.isArray() && implementsConfigurationSerializable(parameterType.getComponentType()))
            {
                writeArray(yamlFile, getKeyFromMethodName(m.getName()), parameterType);
            }
            else if(parameterType.isArray() && isSupportedType(parameterType.getComponentType()))
            {
                writeArray(yamlFile, getKeyFromMethodName(m.getName()), parameterType);
            }
            else if(isSupportedType(parameterType))
            {
                writeType(yamlFile, getKeyFromMethodName(m.getName()), parameterType);
            }
            else
            {
                bulka.getPlugin().getLogger().warning("Encountered a method marked configurable with unsupported parameter type " + m.getParameterTypes()[0] + " in " + m.getName());
            }
        }
    }

    private void writeArray(YamlFile yamlFile, String key, Class<?> parameterType)
    {
       String className = parameterType.getComponentType().getName();

       if(implementsConfigurationSerializable(parameterType.getComponentType()))
       {
           ConfigurationSerializable serializable = getSerializable(parameterType.getComponentType());
           List<Map<String, Object>> serializeds = new ArrayList<>();

           for(int i = 0; i < 3; i++)
           {
               serializeds.add(serializable.serialize());
           }

           yamlFile.set(key, serializeds);
       }
       else
       {
           List<String> strings = new ArrayList<>();

           for(int i = 0; i < 3; i++)
           {
               strings.add(className);
           }

           yamlFile.set(key, strings);
       }
    }

    private ConfigurationSerializable getSerializable(Class<?> type)
    {
        Constructor constructor = null;

        for(Constructor c : type.getDeclaredConstructors())
        {
            if(c.getParameterTypes().length == 0)
            {
                System.out.println("Found valid constructor in serializable.");
                constructor = c;
            }
        }

        constructor.setAccessible(true);
        ConfigurationSerializable serializable = null;

        try {
            serializable = (ConfigurationSerializable) constructor.newInstance();
        } catch (InstantiationException e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        } catch (IllegalAccessException e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        } catch (InvocationTargetException e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        }

        return serializable;
    }

    private boolean implementsConfigurationSerializable(Class<?> clazz)
    {
        System.out.println("implementsSerializable()");
        for(int i = 0; i < clazz.getInterfaces().length; i++)
        {
            System.out.println(clazz.getInterfaces()[i].getName().toString());

            if(clazz.getInterfaces()[i].getName().equals("org.bukkit.configuration.serialization.ConfigurationSerializable"))
                return true;
        }

        return false;
    }

    private void writeType(YamlFile yamlFile, String key, Class<?> value)
    {
        yamlFile.set(key, value.getSimpleName());
    }

    private void writeSerializable(YamlFile yamlFile, String key, Class<?> value)
    {
        ConfigurationSerializable serializable = getSerializable(value);
        Map<String, Object> serialized = serializable.serialize();
        Map<String, String> serializedTypes = new HashMap<>();

        for(String s : serialized.keySet())
        {
            serializedTypes.put(s, serialized.get(s).getClass().getName());
        }

        yamlFile.set(key, serializedTypes);
    }

    private String getKeyFromMethodName(String methodName)
    {
        return methodName.substring(3);
    }

    private boolean isSupportedType(Class clazz)
    {
        return supportedTypes.contains(clazz);
    }

    private static HashSet<Class<?>> getSupportedTypes()
    {
        HashSet<Class<?>> set  = new HashSet<>();
        set.add(String.class);
        set.add(Boolean.class);
        set.add(Integer.class);
        set.add(Double.class);
        set.add(Byte.class);
        set.add(Short.class);
        set.add(Long.class);
        set.add(Float.class);

        set.add(int.class);
        set.add(boolean.class);
        set.add(byte.class);
        set.add(short.class);
        set.add(long.class);
        set.add(float.class);
        return set;
    }
}
